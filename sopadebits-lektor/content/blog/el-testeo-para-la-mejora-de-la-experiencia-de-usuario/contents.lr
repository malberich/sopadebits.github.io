---
_model: blog-post
---
title: El testeo para la mejora de la experiencia de usuario
---
date: 2011-04-07 19:43:09 +0200
---
author: Mario Alberich
---
categories: informatica
---
tags: testeo,desarrollo
---
body:

<p><a href="http://www.sopadebits.com/wp-content/uploads/2011/03/selenium-logo.png"><img class="alignleft size-full wp-image-26918" title="selenium-logo" alt="" src="http://www.sopadebits.com/wp-content/uploads/2011/03/selenium-logo.png" width="200" height="181" /></a>Durante el último a&ntilde;o y medio he estado utilizando herramientas desarrolladas en el proyecto&nbsp;<a title="Selenium Web Testing" href="http://seleniumhq.org/">Selenium</a>.&nbsp;Estas herramientas de software abierto para el testeo de interficies de aplicaciones web se ha vuelto casi imprescindible para mí en el momento de revisar la interacción con el usuario.</p><!--more-->
<p>Aunque existen muchos tipos de pruebas de aplicaciones, considero que las pruebas de UI son especialmente críticas: en último término determinan la calidad percibida, con independencia de la calidad interna del producto.</p>
<p>Mi utilización de Selenium (en especial <a title="Selenium RC" href="http://seleniumhq.org/projects/remote-control/">Selenium RC</a>) se ha limitado a su objetivo original, pero durante las <em>horas de vuelo</em> que transcurren durante las pruebas surgen ideas sobre el papel del testeo en el desarrollo de aplicaciones web. &nbsp;Sólo con ver la ejecución automática del testeo y adoptar el <em>sombrero</em> del usuario final, se pueden llegar a contar las mejoras por docenas.</p>
<h2>La realidad del equipo de desarrollo</h2><br />
Aunque la tecnología web precisa una mirada interdisciplinar, cada equipo enfoca las soluciones según sus conocimientos. &nbsp;&nbsp;Mi experiencia se basa en proyectos más centrados en la parte técnica,&nbsp;por lo que el desarrollo (mucha programación y menos dise&ntilde;o) absorben mucho tiempo. &nbsp;Si el tiempo estimado se agota, la inercia lleva a sacarlo de las fases finales.</p>
<p>He comprobado también por la experiencia que el tiempo de testeo y documentación se acaban recuperando, quizá fuera de plazo, y a lo peor con la decepción del cliente. &nbsp;Porque al cliente le importa poco la implantación del modelo de datos, e incluso las luces y colores. &nbsp;Si no funciona como la entiende,&nbsp;<a title="Seth Godin: this is broken - TED" href="http://www.ted.com/talks/seth_godin_this_is_broken_1.html ">la aplicación está rota</a>.</p>
<p>Sé que testear la interacción y documentar para el usuario final son tareas percibidas como <em>tediosas</em>, ya que suponen un <em>cambio de sombrero</em> para cualquier desarrollador. &nbsp;Es el equivalente informático a <em>corregir nuestro propio dictado</em>.</p>
<p>&iquest;Argumentos habituales? Sobre el testeo de UI se dice que ya es suficiente con las pruebas que se realizan mientras se desarrolla (falso); de la documentación de usuario... quizá ni hablemos, porque con el axioma&nbsp;<em>Mac</em> segun el cual un programa se explica por sí solo (error grave), la excusa está servida. &nbsp;Claro,&nbsp;<a title="Apple no es un modelo para todos - Alzado.org" href="http://www.alzado.org/articulo.php?id_art=894">porque todas las empresas de desarrollo han de ser como Apple</a>, &iquest;no?</p>
<p>Ponerse unas horas en la situación del usuario después de semanas de verlo todo&nbsp;<em>desde dentro</em> es mucho más complejo de lo que pueda parecer: un programador conoce los datos y la estructura de la aplicación. Ve todas las opciones aunque sean invisibles (porque las ha puesto él), y sabe que ante un error puede resolverlo rápidamente (no como el usuario final). &nbsp;Su percepción de las consecuencias no está alineada con la del usuario final, y esto le resta capacidad crítica.</p>
<p>Pero si además se le plantea que redacte el manual de usuario, utilizará terminología técnica (porque se han familiarizado con ella). &nbsp;Y yo, que conste, lo entiendo. &nbsp;No sólo porque desarrolle, sino porque cuando lo veo&nbsp;<em>desde el otro lado</em> sé que es complicado. Por no decir lo poco que motiva explicar la aplicación por segunda vez (la primera vez lo ha <em>explicado</em> a una máquina) y en términos distintos.</p>
<h2>Tendiendo puentes</h2><br />
Es por eso que cada vez veo con más interés el testeo como el puente que vincula la visión del cliente y el desarrollo. &nbsp;El testeo puede establecer guías concretas sobre el que un intermediario puede hablar con el cliente. &nbsp;Esa concreción por sí misma evita los malentendidos habituales. Y aporta mejoras en concreción.</p>
<p>Con la información recopilada en esas reuniones puede desarrollar casos de uso (o escenarios de usuario), &nbsp;describir la prueba, estructurar las fases y establecer los requerimientos.</p>
<p>Con esto, puede pactar con el equipo de desarrollo las tareas a realizar, desarrollar la prueba, y redactar la documentación de usuario bajo un guión unificado. &nbsp;Y lo que verificará que la tarea está hecha es la superación de las pruebas.</p>
<p>Espero tener tiempo para comentar en otros artículos el detalle de estas relaciones, lo que permiten y lo que pueden complementarse con otros métodos.</p>

---