---
_model: blog-post
---
title: mysqldump, backup comprimido con gzip
---
date: 2013-08-12 09:52:32 +0200
---
author: Mario Alberich
---
categories: informatica
---
tags: shell,mysql,backup
---
body:

<p>En algunas ocasiones el espacio disponible para almacenar copias de seguridad de la base de datos es escaso, por lo que quizá no disponemos del espacio para realizar un volcado completo de la base de datos, y en segunda fase comprimir ese resultado. También puede ser que queramos acortar el proceso evitando la escritura en disco (que puede ser lento), y al disponer de un cierto margen de CPU, podemos comprimir <em>al vuelo</em>.</p><!--more-->
<h2>Pipes</h2><br />
Suponiendo que el comando básico de mysqldump sea como sigue:</p>
<pre class="brush: shell; gutter: true">mysqldump --opt -u [usuario] -p[clave] [base_de_datos] > [copiaseguridad.sql]</pre><br />
Sabemos que mysqldump devuelve por <em>stdout</em> todo el texto de las sentencias SQL que conforman la base de datos. Eso se guarda en el archivo <em>copiaseguridad.sql</em>. &nbsp;Lo que se puede hacer es a&ntilde;adir un <em>pipe</em> hacia gzip, y que éste programa sea el que realmente genera el archivo de backup:</p>
<pre class="brush: shell; gutter: true">mysqldump -u [usuario] -p[clave] [base_de_datos] | gzip > [copiaseguridad.sql.gz]</pre><br />
En este caso, gzip capturará todo el contenido que antes enviábamos a copiaseguridad.sql y lo comprimirá. Una vez hecho esto, ahora sí, lo guardamos en un archivo. Por convención se le a&ntilde;ade el sufijo ".sql.gz", ya que de este modo queda claro que está comprimido y del contenido. &nbsp;Además, al descomprimir desaparece el ".gz", por lo que nos queda la extensión ".sql".</p>
<h2>Importar el archivo comprimido</h2><br />
Llega el fatídico día que requiere recuperar la base de datos. &nbsp;&iquest;Cómo procedemos? Vamos a incorporar a gunzip, la utilidad de descompresión. &nbsp;Como en el caso anterior, podríamos ejecutar gunzip y luego mysql. Pero la idea es economizar la escritura en disco, así que seguiremos usando pipes:</p>
<pre class="brush: shell; gutter: true">gunzip < [copiaseguridad.sql.gz] | mysql -u [usuario] -p[clave] [base_de_datos]</pre><br />
Simplemente:</p>
<ul>
<li>Enviamos a gunzip el contenido del archivo gz.</li>
<li>gunzip envía el resultado por <em>stdout</em>.</li>
<li>Este resultado es recogido por la <em>pipe</em> de mysql, que lo importa a <em>base_de_datos.</em></li><br />
</ul></p>
<h2>Ratios de compresión</h2><br />
Los archivos SQL son ni más ni menos que archivos de texto. En estos casos los ratios de compresión (tama&ntilde;o del archivo comprimido en comparación al archivo normal) son bastante notables, y pueden variar según el nivel de compresión. La contrapartida es que a mayor nivel de compresión, más uso de CPU (y más lento).</p>
<p>Sin embargo, si lo tuyo es una necesidad apremiante de espacio en disco, puedes a&ntilde;adir el nivel de compresión (entre 1 y 9, siendo 6 el valor por defecto) al ejecutar gzip:</p>
<pre class="brush: shell; gutter: true">mysqldump -u [usuario] -p[clave] [base_de_datos] | gzip -9 > [copiaseguridad.sql.gz]</pre><br />
Puedes hacer pruebas para revisar los ratios de compresión. La decisión final depende de todos los factores (CPU disponible, espacio/velocidad de disco, etc.).</p>
<p>En último término, también puedes usar <a title="Wikipedia: bzip2" href="http://en.wikipedia.org/wiki/Bzip2" target="_blank">bzip2</a>, aunque la <a title="A Quick Benchmark: Gzip vs. Bzip2 vs. LZMA" href="http://tukaani.org/lzma/benchmarks.html" target="_blank">relación entre velocidad y compresión respecto a gzip</a> puede desmotivarte.</p>

---