---
_model: blog-post
---
title: Javascript - Refactorizar y buscar estructuras de sintaxis
---
date: 2014-03-11 10:00:50 +0100
---
author: Mario Alberich
---
categories: informatica
---
tags: javascript,grep,nodejs,graspjs
---
body:

<p><a href="http://grapjs.org/">GraspJS</a> es una utilidad que se posiciona como una mejora respecto al tándem grep/sed para la refactorización de código. Su propuesta de valor es sencilla: no ejecuta un análisis textual, sino estructural del código.</p><!--more-->
<h2>Análisis textual del código javascript y sus limitaciones</h2><br />
Durante el desarrollo aplicaciones en cualquier lenguaje podemos estar utilizando ciertos patrones en la estructura del código que posteriormente queremos localizar, ya sea porque no resultan óptimos, porque hayan quedado encapsulados en una biblioteca o utilidad diferente, o simplemente porque no cumplen los estándares y nomenclaturas que deseamos. O simplemente porque escribimos código imperfecto ya sea en javascript o cualquier otro caso, y en un momento determinado queremos corregirlo. En esa situación, &iquest;Cómo podemos encontrar y/o remplazar esos fragmentos?</p>
<p>La primera solución que nos surge es la de grep/sed: Esto es especialmente útil si ya hay un mínimo criterio en la estructura de código, o bien estamos buscando elementos que por sus características textuales ya son lo suficientemente específicos. El problema es que eso cubre un número determinado de casos, y además tiene limitaciones a la hora de aislarse del&nbsp;<em>ruido</em> que pueda tener el código: desde uso ambiguos de la nomenclatura, hasta código comentado y similares. En otras palabras, esta aproximación no se aprovecha de la sintaxis del código, lo que abriría la opción de la <a href="http://graspjs.com/docs/concepts/">búsqueda estructural</a>.</p>
<h2>Búsqueda en Javascript por sintaxis y la refactorización</h2><br />
Para dar un paso más en una búsqueda estructural en código <a title="Javascript - Sopa de bits" href="http://sopadebits.com/tag/javascript">Javascript</a>, podemos utilizar <a href="http://grapjs.org/">graspJS</a>, utilizando varios sistemas de búsqueda en el código, basados en lo que el autor denomina <em>motores</em>:</p>
<ul>
<li>Búsqueda con selectores del estilo CSS con el <a href="http://graspjs.com/docs/squery/"><em>motor</em> squery</a>.</li>
<li>Búsqueda por ejemplos y wildcards con el&nbsp;<a href="http://graspjs.com/docs/equery/"><em>motor</em> equery</a>.</li>
<li>Remplazar las coincidencias con la <a href="http://graspjs.com/docs/replace/">utilidad de remplazo</a>, que incorpora filtros y opciones para modificar las coincidencias más allá de un remplazo literal.</li><br />
</ul><br />
En el propio blog del proyecto se pueden encontrar <a href="http://graspjs.com/blog/2014/01/07/refactoring-javascript-with-grasp/">ejemplos más teóricos</a>&nbsp;y <a href="http://graspjs.com/blog/2014/02/09/refactoring-javascript-with-grasp-real-life-examples/">propuestas de la vida real</a> para aprovechar el potencial de graspJS en nuestro día a día. Vale la pena decir que la sintaxis es algo compleja y requiere de cierto tiempo de pruebas (y quizá de algo más de documentación sobre los operadores), pero es una más que interesante utilidad para seguir y aplicar en nuestros desarrollos javascript (y en el futuro <a title="What languages does grasp support" href="http://graspjs.com/faq/#what_languages_does_grasp_support">a otros lenguajes</a>).</p>

---