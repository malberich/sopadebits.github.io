---
_model: blog-post
---
title: Phing (VII) - Operaciones con control de versiones
---
date: 2013-07-01 17:36:01 +0200
---
author: Mario Alberich
---
categories: informatica
---
tags: php,phing
---
body:

<p>Si la automatización de tareas es uno de los grandes objetivos de Phing, la gestión del control de versiones es un objetivo importante. Las tareas de despliegues sistemáticos, principalmente para el testeo y la integración continua se pueden agilizar utilizando Phing.</p><!--more-->
<p>Para el caso, veremos las tareas disponibles para las dos herramientas más populares de control de versiones: <a title="Git" href="http://git-scm.com/">Git</a> y <a title="Subversion" href="http://subversion.tigris.org/">Subversion</a>. Salvo excepciones notables, las tareas de ambos casos permiten más o menos los mismos objetivos, pero dado que los dos sistemas tienen algunas diferencias estructurales y de nomenclatura, las tareas varían ligeramente.</p>
<p>Los siguientes apartados asumen que ya tienes unas nociones mínimas del concepto de control de versiones, así como de los comandos más habituales. Si no fuera así, visita la <a title="Git documentation" href="http://git-scm.com/documentation">documentación de Git</a> o el <a title="Subversion book" href="http://svnbook.red-bean.com/">libro de Subversion</a>.</p>
<h2>Inicialización de repositorio</h2><br />
En el caso de git, tenemos GitInit:</p>
<pre class="brush: xml; gutter: false"><gitinit bare="true" repository="./ruta/hasta/nuevo/repositorio" /></pre><br />
Lo anterior inicializa un repositorio. La opción <em>bare</em> permite inicializarlo sin mostrar la estructura de directorios. Esto es especialmente apropiado al instalarlo en servidores que alojarán estos repositorios (al estilo Github o similares).</p>
<p>Subversion en este caso no tiene una rutina de inicialización de repositorios.</p>
<h2>Registro de actividad (log)</h2><br />
En el caso de Git:</p>
<pre class="brush: xml; gutter: true"><gitlog<br />
    since="Sun Jan 23 23:55:42 2013 +0300"<br />
    until="Mon Jan 24 09:59:33 2013 +0300"<br />
    outputProperty="logs"<br />
    repository="/ruta/al/repositorio" /></pre><br />
Y en el caso de subversion:</p>
<pre class="brush: xml; gutter: true"><svnlog<br />
    svnpath="/usr/bin/svn"<br />
    workingcopy="/home/user/svnwc"<br />
    propertyname="svn.log"/></pre><br />
En ambos casos tienen otras varias opciones, aunque hay que reconocer que Git ofrece más posibilidades de filtro y formatos de salida.</p>
<h2>Obtener copias de repositorios ajenos</h2><br />
En git, esta función se cumple con <em>git clone</em>:</p>
<pre class="brush: xml; gutter: false"><gitclone<br />
    repository="git://github.com/path/to/repo/repo.git"<br />
    targetPath="/ruta/al/repositorio"/></pre><br />
En el caso de subversion, la operación es la de <em>checkout</em>:</p>
<pre class="brush: xml; gutter: true"><svncheckout<br />
   svnpath="/usr/bin/svn"<br />
   repositoryurl="svn://localhost/project/trunk/"<br />
   todir="/ruta/a/copia/de/trabajo"/></pre></p>
<h2>Trabajo con ramas (branching y merging)</h2><br />
En el caso de Git, las operaciones son el GitBranch, GitMerge y GitCheckout:</p>
<pre class="brush: xml; gutter: true"><gitbranch<br />
    repository="/ruta/a/repo"<br />
    branchname="nombre-rama" /></pre></p>
<pre class="brush: xml; gutter: true"><gitmerge<br />
    repository="/ruta/a/repo"<br />
    remote="nombre-rama-1 nombre-rama-2"<br />
    message="merging repos" commit="true" /></pre></p>
<pre class="brush: xml; gutter: true"><gitcheckout<br />
    repository="/ruta/al/repositorio"<br />
    branchname="mi-rama" quiet="true" create="true" /></pre><br />
En el caso de subversion, utilizamos SvnCopy y SvnSwitch:</p>
<pre class="brush: xml; gutter: true"><svncopy<br />
   svnpath="/usr/bin/svn"<br />
   username="anony"<br />
   password="anony"<br />
   nocache="true"<br />
   repositoryurl="svn://localhost/project/trunk/"<br />
   todir="svn://localhost/project/tags/0.1"/></pre></p>
<pre class="brush: xml; gutter: true"><svnswitch<br />
   svnpath="/usr/bin/svn"<br />
   repositoryurl="http://localhost/project/tags/2.4.2"<br />
   todir="/ruta/a/copia/trabajo"/></pre><br />
No existe tarea de Subversion para el proceso de <em>merge</em>.</p>
<h2>Sincronización de repositorios</h2><br />
Git dispone de las tareas GitPush, GitPull, y GitFetch:</p>
<pre class="brush: xml; gutter: true"><gitpush<br />
    repository="/ruta/al/repositorio"<br />
    refspec="master:foobranch" tags="true" /></pre></p>
<pre class="brush: xml; gutter: true"><gitpull<br />
    repository="/ruta/al/repo" all="true" /></pre></p>
<pre class="brush: xml; gutter: true"><gitfetch<br />
    repository="/ruta/al/repo" all="true" /></pre><br />
Subversion dispone de las tareas SvnCommit, y SvnUpdate,</p>
<pre class="brush: actionscript3; gutter: true"><svncommit<br />
    workingcopy="/ruta/a/copia/local"<br />
    message="Comentario del commit" /></pre></p>
<pre class="brush: xml; gutter: true"><svnupdate<br />
   svnpath="/usr/bin/svn"<br />
   todir="/ruta/a/copia/local"/></pre><br />
&nbsp;</p>

---