---
_model: blog-post
---
title: mysqldump y gzip mostrando progreso
---
date: 2014-02-06 09:00:19 +0100
---
author: Mario Alberich
---
categories: informatica
---
tags: shell,mysql,backup,pv
---
body:

<p>En un artículo anterior comentaba la posibilidad de <a title="mysqldump, backup comprimido con gzip" href="http://www.sopadebits.com/mysqldump-backup-comprimido-con-gzip">generar un &nbsp;archivo gzip a partir de un volcado de la base de datos MySQL con mysqldump</a>. Ese proceso tenía un inconveniente, y es que desconocemos el estado del progreso de esa copia de seguridad. Para bases de datos peque&ntilde;as no es un problema, pero cuando &nbsp;crece, nos podemos quedar esperando un rato largo, y sin información.</p><!--more-->
<h2>pv para mostrar el progreso de mysqldump</h2><br />
Esta es la novedad de hoy: una herramienta para mostrar el progreso dentro de una&nbsp;<em>pipe</em> de proceso. El funcionamiento es la mar de sencillo. Si tienes un archivo medianamente grande, prueba la instrucción:</p>
<pre class="brush: shell; gutter: true">cat file.txt | pv -cN cat > file2.txt</pre><br />
La instrucción anterior muestra información sobre la transferencia de bytes por la ca&ntilde;ería del proceso. No está mal, &iquest;no?</p>
<p>Así que si tomamos el ejemplo del anterior artículo:</p>
<pre>mysqldump -u [usuario] -p[clave] [base_de_datos] | gzip > [copiaseguridad.sql.gz]</pre><br />
Podemos modificarla para tener lo siguiente:</p>
<pre>mysqldump -u [usuario] -p[clave] [base_de_datos] | gzip | pv -cN gzip > [copiaseguridad.sql.gz]</pre></p>
<h2>Progreso de mysqldump conociendo el tama&ntilde;o del origen</h2><br />
Pero claro, lo anterior nos indica cuánto tama&ntilde;o estamos procesando, pero cuánto nos falta (qué porcentaje queda pendiente). Así que vamos a intentarlo. Para conseguirlo, es obvio que necesitamos un dato clave: el total del archivo a procesar. Sí, estás en lo cierto: es un peque&ntilde;o chasco porque a veces no tenemos ese dato. Pero tenemos algunas opciones. Por ejemplo, podríamos tener el tama&ntilde;o del último backup, y con ello podríamos tener una aproximación suficiente. Por ejemplo, para el caso de un archivo sql llano, tenemos lo siguiente:</p>
<pre>$ cat dump.sql | pv -cN cat -s $(du -sb dump.sql | awk &#039;{print $1}&#039;) > dump2.sql<br />
 cat: 347MB 0:00:06 [27,7MB/s] [==================> ] 43% ETA 0:00:07</pre><br />
Vale bien, &iquest;y todo esto qué es? Pues desglosándolo por partes:</p>
<ul>
<li>cat dump.sql: vuelca el contenido del archivo a la ca&ntilde;ería.</li>
<li>pv
<ul>
<li>-cN cat -> muestra el progreso del comando&nbsp;<em>cat</em>.</li>
<li>-s $(du -sb dump.sql | awk '{print $1}') -> &nbsp;Mira el tama&ntilde;o del archivo dump.sql (du -sb) y se queda sólo con el primer dato de la primer file que sale en pantalla (print $1), que son los bytes del tama&ntilde;o.</li><br />
</ul><br />
</li><br />
</ul><br />
Con esto, estamos ejecutando algo equivalente a si lo indicáramos nosotros directamente, que en el caso del archivo que he utilizado es:</p>
<pre class="brush: shell; gutter: true">$ pv -cN cat -s 828997215</pre><br />
Trasladando esto a nuestra operación anterior, tenemos:</p>
<pre>mysqldump -u [usuario] -p[clave] [base_de_datos] | gzip | pv -cN gzip -s $(gzip -l copiaseguridad-anterior.sql.gz | tail -n 1 | awk &#039;{print $2}&#039;) > [copiaseguridad.sql.gz]</pre><br />
La diferencia respecto al caso anterior es que utilizamos la instrucción gzip -l, que nos indica la lista de archivos que hay en un archivo gz (en nuestro caso sólo hay uno), tras lo cual extraemos los bytes que ocupa descomprimido. Con esto no tenemos un dato exacto, pero sí aproximado, especialmente si la base de datos es grande (el incremento entre backups acaba siendo cada vez menor).</p>
<p>Así que nada, a partir de ahora tienes la información sobre en qué punto estás... en tus backups ;-)</p>

---